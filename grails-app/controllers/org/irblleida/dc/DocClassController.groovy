package org.irblleida.dc

import grails.validation.ValidationException
import static org.springframework.http.HttpStatus.*

class DocClassController {

    DocClassService docClassService

    def edit(Long id) {
        respond docClassService.get(id)
    }

    def update(DocClass docClass) {

        if (docClass == null) {
            notFound()
            return
        }

        for(DocVariable docVariable in docClass.variables){

            if(params[docVariable.name + '-description']) docVariable.description = params[docVariable.name + '-description']
            if(params[docVariable.name + '-type']) docVariable.type = params[docVariable.name + '-type']
            if(params[docVariable.name + '-classType']) docVariable.classType = params[docVariable.name + '-classType']
            if(params[docVariable.name + '-code']) docVariable.code = params[docVariable.name + '-code']
            if(params[docVariable.name + '-required']) docVariable.required = (params[docVariable.name + '-required'] == 'true')
            if(params[docVariable.name + '-defaultUnits']) docVariable.defaultUnits = params[docVariable.name + '-defaultUnits']
        }

        try {
            docClassService.save(docClass)
        } catch (ValidationException e) {
            respond docClass.errors, view:'edit', id: docClass.id.toString()
            return
        }

        flash.message = message(code: 'default.saved.success')
        redirect controller: 'dataCatalog', action: 'index'
    }

    def delete(Long id) {
        if (id == null) {
            notFound()
            return
        }

        DocClass docClass = DocClass.get(id)
        if(!docClass.autoGenerated){
            for (variable in docClass.variables){
                DocEnum docEnum = DocEnum.findByName(variable.type)
                if (docEnum){
                    docEnum.removeFromContexts(docClass)
                    if(docEnum.contexts.size() == 0) docEnum.delete(flush: true)
                }
            }

            docClassService.delete(id)
        }

        redirect controller: 'dataCatalog', action: 'index'
    }

    protected void notFound() {
        request.withFormat {
            form multipartForm {
                flash.message = message(code: 'default.not.found.message', args: [message(code: 'docClass.label', default: 'DocClass'), params.id])
                redirect action: "index", method: "GET"
            }
            '*'{ render status: NOT_FOUND }
        }
    }
}
